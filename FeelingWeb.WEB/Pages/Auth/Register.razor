@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService


<EditForm class="register" Model="userDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />

    <div class="row">
        <head>
            <link href="css/register.css" rel="stylesheet" />
        </head>
        <h3>Registrar Nuevo Usuario</h3>

        <div class="col-6">
            <div class="mb-3">
                <span class="oi oi-person" aria-hidden="true"></span>
                <label>Nombres:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.FirstName" />
                    <ValidationMessage For="@(() => userDTO.FirstName)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-person" aria-hidden="true"></span>
                <label>Apellidos:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                    <ValidationMessage For="@(() => userDTO.LastName)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-person" aria-hidden="true"></span>
                <label>Documento:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Document" />
                    <ValidationMessage For="@(() => userDTO.Document)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-phone" aria-hidden="true"></span>
                <label>Teléfono:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                    <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-map-marker" aria-hidden="true"></span>
                <label>Dirección:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Address" />
                    <ValidationMessage For="@(() => userDTO.Address)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-envelope-closed" aria-hidden="true"></span>
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Email" />
                    <ValidationMessage For="@(() => userDTO.Email)" />
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <span class="oi oi-lock-locked" aria-hidden="true"></span>
                <label>Contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                    <ValidationMessage For="@(() => userDTO.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-lock-locked" aria-hidden="true"></span>
                <label>Confirmación de contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                    <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                </div>
            </div>
            <div class="mb-3">
                <span class="oi oi-camera-slr" aria-hidden="true"></span>
                <InputPicture Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
            </div>
        </div>
    </div>
    <div class="center-button">
    <button class="btn btn-primary" type="submit">Registrar</button>
    </div>
</EditForm>

@code {
    private UserDTO userDTO = new();
    private string? imageUrl;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.User;
        var responseHttp = await repository.PostAsync<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
