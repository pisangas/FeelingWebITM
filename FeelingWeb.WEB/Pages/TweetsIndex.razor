@page "/tweets"
@inject IRepository repository


<h3>Listado de Tweets</h3>

<QuickGrid Items="@tweets" @ref="grid" Pagination="pagination">
    <PropertyColumn Property="@(p => p.IsActive)" Sortable="true" Title="Estado" Align="Align.Center">
        <ColumnOptions>
            <label>
                <input type="checkbox" @bind="soloActivos" @bind:after="Filtrar" /> Activos



            </label>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="@(p => p.Weekday)" Sortable="true" Title="Dia" Align="Align.Center" />
    <PropertyColumn Property="@(p => p.Language)" Sortable="true" Title="Idioma" Align="Align.Center" />
    <PropertyColumn Property="@(p => p.Likes)" Sortable="true" Title="Reacciones" Align="Align.Center" />
    <PropertyColumn Property="@(p => p.Content)" Sortable="true" Title="Post" Align="Align.Center" />
    <PropertyColumn Property="@(p => p.UserId)" Sortable="true" Title="Id del Usuario" Align="Align.Center" />
    <PropertyColumn Property="@(p => p.TweetId)" Sortable="true" Title="Id del Tweet" Align="Align.Center" />
</QuickGrid>

<Paginator Value="@pagination" />

@code {
    public IQueryable<Tweet> tweets { get; set; } = null!;
    public IQueryable<Tweet> response { get; set; } = null!;
    QuickGrid<Tweet>? grid;
    bool soloActivos = false;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repository.GetAllAsync<List<Tweet>>("api/Tweets");
        response = httpResponse.Response!.AsQueryable();
        tweets = response;
    }

    public async Task Filtrar()
    {
        if (soloActivos)
        {
            tweets = response.Where(p => p.IsActive);
        }
        else
        {
            tweets = response;
        }
        await grid!.RefreshDataAsync();
    }
}
